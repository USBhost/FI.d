#!/system/bin/sh
#
# W.I.P. script, by USBhost. made for the Nexus 9.
#
# I use busybox for some commands because
# some of them are newer.
#

# Load Symbols
	. /system/etc/FI.d/symbols

# Script pacific Symbols
	LC="01afterboot"

# Overclocking.
# GPU 0.984 ghz
## (0 = disabled) (1 = enabled) ##
	oc=0

# CPU Interactive Governor fix.
# this will increase battery life.
# Note: but adding some lag.
## (0 = disabled) (1 = enabled) ##
	gfix=0

# FSync
# This helps reduce data corruption but
# lowers performance.
## (0 = disabled) (1 = default/enabled) ## 
	fs=1

# USB Fast Charge.
## (0 = default/disabled) (1 = enabled) ##
	fc=1

# Double Tap to Wake / DT2W
## (0 = disabled) (1 = default/enabled) ##
	dtw=1

# Mount /data/local/tmp as tmpfs
# This is where apps are temporary downloaded to be installed
# when instaling from adb.
# Note: This is vary experimental.
## (0 = default/disabled) (1 = enabled) ##
	mtmp=0

#   ------------------------<MEMORY>-----------------------   #

# Ultra Kernel Samepage Merging
# You should not enable UKSM if your using zram
# because uksm/ksm will not work on swap/zram memory.
# Note: this may or may not add lag.
## (0 = disabled) (1 = enabled) ##
	uksm=0
	ksm=0 # only use this if uksm is not compiled in the kernel

# Low Memory Killer.
# ONLY! if your vary vary memory conscious, then you can disable this,
# if your not things will go vary vary bad!
# Disabling this is not recommend.
## (0 = disabled) (1 = system default/enabled) ##
	lmk=1

# SWAP wait.
# This controls if you want swap to be at a certain percent until full before lmk starts killing.
	swait=0 # (0 = system default/disabled) (1 = enabled)
                # This will account free swap in lmk if enabled.
	swaitp=00 # 1=0% 2=50% 3=66% 4=75% 5=80% 10=90% 0=100% until killing is allowed
                  # 00=off will not enforce.

# ZRAM Only.
# "aswap" and "cswap" will be null.
## (0 = disabled) ##
	zswap=256 # "zswap" is in MB.

# swap file in /cache.
# "cswap" must not go over 150MB if /cache is formated to f2fs
# Note: the size of /cache is 256MB.
## (0 = disabled) ##
	cswap=0 # "cswap" is in MB.

# /cache all swap.
# "cswap" will be null if enabled.
# Swap will be 256MB or 512MB if "raid" = 1 .
# Note: cache will be formated to swap 
# also your EMMC will be used a lot aka shorter lifespan.
## (0 = disabled) (1 = enabled) ##
	aswap=0

# Raid 0
# Splits memory evenly across "zswap" and "cswap".
# In doing so makes "cswap" or "aswap" about ~100% faster 
# but if they are too big you will get a lot of lag.
# this can be used on "cswap" or "aswap".
## (0 = disabled) (1 = enabled) ##
	raid=0

#   ------------------------<EXPERT>-----------------------   #

# Load override
# Note: be vary careful with what you put in "/sdcard/override"
# this runs as root, so use with caution.
if [ -e "$ORID" ]; then
	$LOGCATI$LC " $ORID; loading "
	. $ORID
elif [ -e "$ORID".txt ]; then
	ORID+=.txt
	$LOGCATI$LC " $ORID; loading "
	. $ORID
else
	$LOGCATI$LC " no override; skipping "
fi
MCACHE
$BB swapoff -a # to keep things clean
echo 1 > $ZRS/reset # to keep things clean
if [ "$cswap" -ge "1" ] && [ "$aswap" == "0" ] && [ "$zswap" == "0" ] && [ "$MCACHE" == "$CACHE" ]; then
	CSIZE
	if [ ! -e "$CSWAP" ] || [ "$CSIZE" != "$cswap" ]; then # to make or change cswap
		# if cswap is more than the free space left in cache then this will loop on every reboot which is vary bad.
		# if you get "cache; is out of space" error please lower cswap size.
		# FIXME: try to fix this problem
		if [ -e $CSWAP ] && [ "$CSIZE" != "$cswap" ]; then
			$LOGCATI$LC " cache; changing cswap size to $cswap "
		fi
		$BB dd if=/dev/zero of=$CSWAP bs="$cswap"M count=1
		format="1" # if cswap size changed and/or made we must reformat/format it back to swap
		CSIZE
		if [ "$cswap" != "$CSIZE" ]; then # if so this is bad!
			cswap="0" # stop cswap from being used for the user to know faster
			format="0"
			$LOGCATW$LC " cache; is out of space "
			reason="out of space"
		fi
	fi
	if [ "$cswap" != "0" ]; then # if so all is good!
		chmod 600 $CSWAP # make sure root can only read it
		if [ "$format" == "1" ]; then
			$BB mkswap $CSWAP
		fi
		if [ "$raid" == "1" ]; then
			$BB swapon -p 1 $CSWAP # raid 0
		elif [ "$raid" == "0" ]; then
			$BB swapon $CSWAP # cswap
		fi
		if [ "$raid" == "1" ] && [ "$cswap" -ge "1" ]; then
			echo 1 > $ZRS/reset
			echo 1 > $ZRS/max_comp_streams
			echo lz4 > $ZRS/comp_algorithm
			echo "$cswap"M > $ZRS/disksize
			$BB mkswap $ZRB
			$BB swapon -p 1 $ZRB
		fi
	elif [ "$cswap" == "0" ]; then # if so this is bad!
		$LOGCATW$LC " cswap; will not run; $reason"
	fi
fi
if [ "$zswap" == "0" ] && [ "$aswap" == "1" ]; then
	MCACHE
	if [ "$MCACHE" == "$CACHE" ]; then # if cache is mounted unmount it
		$BB umount /cache
		MCACHE
		if [ "$MCACHE" == "" ]; then
			$LOGCATI$LC " cache; unmount success "
			aswap="1"
			format="1"
		elif [ "$MCACHE" == "$CACHE" ]; then
			$LOGCATW$LC " cache; unmount failed "
			reason="cache is still mounted"
			aswap="0"
		fi
	elif [ "$MCACHE" == "" ]; then # cache was not mounted
		aswap="1"
		format="0"
	fi
	if [ "$aswap" == "1" ] && [ "$format" == "1" ]; then
		$BB mkswap $CACHE || $LOGCATW$LC " cache; format failed "
	fi
	if [ "$aswap" == "1" ]; then
		$BB mount -t tmpfs -o rw,mode=1777 tmpfs /cache
		$BB swapon -p 1 $CACHE || 
		$LOGCATW$LC " swapon failed "
		if [ "$raid" == "1" ]; then
			echo 1 > $ZRS/reset
			echo 1 > $ZRS/max_comp_streams
			echo lz4 > $ZRS/comp_algorithm
			echo "$PSIZE"M > $ZRS/disksize
			$BB mkswap $ZRB
			$BB swapon -p 1 $ZRB
		fi
	elif [ "$aswap" == "0" ]; then # if so this is bad!
		$LOGCATI$LC "aswap skipped; $reason"
	fi
fi
# FIXME: this needs to be reworked 
if [ "$zswap" -ge "1" ] && [ "$aswap" == "0" ]; then
	echo 1 > $ZRS/reset
	echo "$CORE" > $ZRS/max_comp_streams
	echo lz4 > $ZRS/comp_algorithm
	echo "$zswap"M > $ZRS/disksize
	$BB mkswap $ZRB
	$BB swapon $ZRB
fi
if [ "$uksm" == "1" ] && [ -e /sys/kernel/mm/uksm/run ]; then
	# uksm is slower than ksm but uksm can scan everything
	# so make sleep_millisecs the most it can go. 1000 is the max.
	# note: sleep_millisecs is not the same as in ksm.
	echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs
	echo 1 > /sys/kernel/mm/uksm/run
elif [ "$ksm" == "1" ] && [ -e /sys/kernel/mm/uksm/run ]; then
	# these values where taken from google's low memory doc
	# for the best all-rounder performance/battery ratio.
	echo 100 > /sys/kernel/mm/ksm/pages_to_scan
	echo 500 > /sys/kernel/mm/ksm/sleep_millisecs
	echo 1 > /sys/kernel/mm/ksm/run
else    # just to be safe, still config them.
	if [ -e /sys/kernel/mm/ksm/run ]; then
		echo 100 > /sys/kernel/mm/ksm/pages_to_scan
		echo 500 > /sys/kernel/mm/ksm/sleep_millisecs
		echo 0 > /sys/kernel/mm/ksm/run
	elif [ -e /sys/kernel/mm/uksm/run ]; then
		echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs
		echo 0 > /sys/kernel/mm/uksm/run
	fi
fi
if [ "$lmk" == "0" ]; then
	echo 0 > /sys/module/lowmemorykiller/parameters/minfree
elif [ "$lmk" == "1" ] && [ "$swait" == "1" ]; then
	echo Y > /sys/module/lowmemorykiller/parameters/swap_wait
	if [ "$raid" == "1" ] || [ "$zswap" -gt "$PSIZE" ]; then
		# use swap as much as posable if not you will get a lot more lag.
		# because in flounder if free memory goes below ~250MB things will get vary lagy.
		echo 100 > /proc/sys/vm/swappiness
	fi
	if [ "$swaitp" != "00" ]; then
		echo $swaitp > /sys/module/lowmemorykiller/parameters/swap_wait_percent
	fi
fi
if [ "$oc" == "0" ]; then
	echo 1 > /sys/kernel/tegra_gpu/gpu_cap_state
	echo 852000000 > /sys/kernel/tegra_gpu/gpu_cap_rate
fi
if [ "$gfix" == "1" ]; then
	echo 510000 > /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq
	echo 80 > /sys/devices/system/cpu/cpufreq/interactive/target_loads
	chmod 444 /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq
	chmod 444 /sys/devices/system/cpu/cpufreq/interactive/target_loads
fi
if [ "$dtw" == "0" ]; then
	echo 0 > /sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/wake_gesture
fi
if [ "$fs" == "0" ]; then
	echo 0 > /sys/module/sync/parameters/fsync_enabled
fi
if [ "$fc" == "1" ]; then
	echo 1 > /sys/kernel/fast_charge/force_fast_charge
fi
if [ "$mtmp" == "1" ]; then
	$BB mount -t tmpfs -o rw,mode=1777 tmpfs /data/local/tmp
fi
if [ -e "$CSWAP" ] && [ "$cswap" == "0" ]; then
	rm $CSWAP
fi
