#!/system/bin/sh
#
# W.I.P. script, by USBhost. made for the Nexus 9.
#
# I use busybox for some commands because
# some of them are newer.
#

# Load Symbols
	. /system/etc/FI.d/symbols

# Script pacific Symbols
	LC="01afterboot"

# Overclocking.
# GPU 0.984 ghz
## (0 = disabled) (1 = enabled) ##
	oc=0

# CPU Interactive Governor fix.
# this will increase battery life.
# Note: but adding some lag.
## (0 = disabled) (1 = enabled) ##
	gfix=0

# FSync
# This helps reduce data corruption but
# lowers performance.
## (0 = disabled) (1 = default/enabled) ## 
	fs=1

# USB Fast Charge.
## (0 = default/disabled) (1 = enabled) ##
	fc=1

# Double Tap to Wake / DT2W
## (0 = disabled) (1 = default/enabled) ##
	dtw=1

# Mount /data/local/tmp as tmpfs
# This is where apps are temporary downloaded to be installed
# when instaling from adb.
# Note: This is vary experimental.
## (0 = default/disabled) (1 = enabled) ##
	mtmp=0

#   ------------------------<MEMORY>-----------------------   #

# Use swap as much as posable for zram.
# Note: you may want to make it lower if you not using zram.
	echo 100 > /proc/sys/vm/swappiness

# Ultra Kernel Samepage Merging
# You should not enable UKSM if your using zram
# because uksm will not work on swap/zram memory.
# Note: this will add some micro lag.
## (0 = disabled) (1 = enabled) ##
	uksm=0
	ksm=0 # only use this if uksm is not compiled in the kernel

# Low Memory Killer.
# ONLY! if your vary vary memory conscious, then you can disable this,
# if your not things will go vary vary bad!
# Disabling this is not recommend.
## (0 = disabled) (1 = system default/enabled) ##
	lmk=1

# SWAP wait.
# This controls if you want swap to be a certain percentage before lmk starts killing.
	swait=0 # (0 = system default/disabled) (1 = enabled)
                # This will account free swap space in lmk if enabled.
	swaitp=00 # 1=0% 2=50% 3=66% 4=75% 5=80% 10=90% 0=100% until killing is allowed
                  # 00=off will not enforce.

# ZRAM Only.
# "aswap" and "cswap" will be null.
## (0 = disabled) ##
	zswap=500 # "zswap" is in MB.

# swap file in /cache.
# "cswap" must not go over 150MB if /cache is formated to f2fs
# Note: the size of /cache is 260MB, if there's too little free
# space just enable "aswap=1".
## (0 = disabled) ##
	cswap=0 # "cswap" is in MB.

# /cache all swap.
# "cswap" will be null if enabled.
# Swap will be 260MB or 520MB if "raid" = 1 .
# Note: /cache will be formated to swap, and
# you will most likely need to reboot after the format.
## (0 = disabled) (1 = enabled) ##
	aswap=0

# Raid 0
# Splits memory evenly across "zswap" and "cswap"
# in doing so makes "cswap" or "aswap" about ~100% faster.
# this can be used on "cswap" or "aswap".
## (0 = disabled) (1 = enabled) ##
	raid=0

#   ------------------------<EXPERT>-----------------------   #

# Load override
# Note: be vary careful with what you put in "/sdcard/override"
# this runs as root, so use with caution.
if [ -e "$ORID" ]; then
	$LOGCATI$LC " $ORID; loading "
	. $ORID
elif [ -e "$ORID".txt ]; then
	ORID+=.txt
	$LOGCATI$LC " $ORID; loading "
	. $ORID
else
	$LOGCATI$LC " no override; skipping "
fi
$BB swapoff -a && echo 1 > $ZRS/reset # to keep things clean
if [ "$cswap" -ge "1" ] && [ "$aswap" == "0" ]&& [ "$zswap" == "0" ]; then
	SIZE="$($BB du -h $CSWAP | grep -o '[0-9]*')"
	if [ -e "$CSWAP" ] && [ "$SIZE" == "$cswap" ]; then
		if [ "$raid" == "1" ]; then
			$BB swapon -d -p 1 $CSWAP # raid 0
		elif [ "$raid" == "0" ]; then
			$BB swapon -d $CSWAP # cswap
		fi
	else
		# note: if cache is out of space this will loop on every reboot which is bad.
		# if you get "cache; is out of space" please clear empty out cache or lower cswap.
		if [ -e $CSWAP ]; then
			$LOGCATI$LC " cache; changing size to $SIZE "
			dd if=/dev/zero of=$CSWAP bs="$cswap"m count=1
			SIZE="$($BB du -h $CSWAP | grep -o '[0-9]*')"
			if [ "$cswap" != "$SIZE" ]; then
				$LOGCATW$LC " cache; is out of space "
				$LOGCATI$LC " cache; $cswap != $SIZE "
			fi
		else
			dd if=/dev/zero of=$CSWAP bs="$cswap"m count=1
			SIZE="$($BB du -h $CSWAP | grep -o '[0-9]*')"
			if [ "$cswap" != "$SIZE" ]; then
				$LOGCATW$LC " cache; is out of space "
				$LOGCATI$LC " cache; $cswap != $SIZE "
			fi
		fi
		chmod 600 $CSWAP
		$BB mkswap $CSWAP
		if [ "$raid" == "1" ]; then
			$BB swapon -d -p 1 $CSWAP # raid 0
		elif [ "$raid" == "0" ]; then
			$BB swapon -d $CSWAP # cswap
		fi
	fi
	if [ "$raid" == "1" ]; then
		echo 1 > $ZRS/reset
		echo 1 > $ZRS/max_comp_streams
		echo lz4 > $ZRS/comp_algorithm
		SIZE="$($BB du -h $CSWAP | grep -o '[0-9]*')"
		if [ "$cswap" != "$SIZE" ]; then
			$LOGCATW$LC " cache; is out of space "
			$LOGCATI$LC " cache; $cswap != $SIZE "
			$LOGCATI$LC " raid; changing zram size to $SIZE "
			echo "$SIZE"M > $ZRS/disksize
		else
			echo "$cswap"M > $ZRS/disksize
		fi
		$BB mkswap $ZRB
		$BB swapon -d -p 1 $ZRB
	fi
fi
if [ "$zswap" == "0" ] && [ "$aswap" == "1" ]; then
	if [ -e "$CMOUNT" ]; then
		$BB umount /cache || 
		$LOGCATW$LC " cache; unmount failed "
		$BB mkswap $CACHE || 
		$LOGCATW$LC " cache; format failed "
	fi
	$BB mount -t tmpfs -o rw,mode=1777 tmpfs /cache && $LOGCATI$LC " mounted cache as tmpfs "
	$BB swapon -d -p 1 $CACHE || 
	$LOGCATI$LC " swapon failed: please reboot "
	if [ "$raid" == "1" ]; then
		echo 1 > $ZRS/reset
		echo 1 > $ZRS/max_comp_streams
		echo lz4 > $ZRS/comp_algorithm
		echo "$PSIZE"M > $ZRS/disksize
		$BB mkswap $ZRB
		$BB swapon -d -p 1 $ZRB
	fi
fi
if [ "$zswap" -ge "1" ] && [ "$aswap" == "0" ]; then
	echo 1 > $ZRS/reset
	echo "$CORE" > $ZRS/max_comp_streams
	echo lz4 > $ZRS/comp_algorithm
	echo "$zswap"M > $ZRS/disksize
	$BB mkswap $ZRB
	$BB swapon -d $ZRB
fi
if [ "$uksm" == "1" ]; then
	# uksm is slower than ksm but uksm can scan everything
	# so make sleep_millisecs the most it can go. 1000 is the max.
	# note: sleep_millisecs is not the same as in ksm.
	echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs
	echo 1 > /sys/kernel/mm/uksm/run
elif [ "$ksm" == "1" ]; then
	# these values where taken from google's low memory doc
	# for the best all-rounder performance/battery ratio.
	echo 100 > /sys/kernel/mm/ksm/pages_to_scan
	echo 500 > /sys/kernel/mm/ksm/sleep_millisecs
	echo 1 > /sys/kernel/mm/ksm/run
else    # just to be safe, i dont like errors
	# but still config them
	if [ -e /sys/kernel/mm/ksm/run ]; then
		echo 100 > /sys/kernel/mm/ksm/pages_to_scan
		echo 500 > /sys/kernel/mm/ksm/sleep_millisecs
		echo 0 > /sys/kernel/mm/ksm/run
	elif [ -e /sys/kernel/mm/uksm/run ]; then
		echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs
		echo 0 > /sys/kernel/mm/uksm/run
	fi
fi
if [ "$lmk" == "0" ]; then
	echo 0 > /sys/module/lowmemorykiller/parameters/minfree
elif [ "$lmk" == "1" ] && [ "$swait" == "1" ]; then
	echo Y > /sys/module/lowmemorykiller/parameters/swap_wait
	if [ "$swaitp" != "00" ]; then
		echo $swaitp > /sys/module/lowmemorykiller/parameters/swap_wait_percent
	fi
fi
if [ "$oc" == "0" ]; then
	echo 1 > /sys/kernel/tegra_gpu/gpu_cap_state
	echo 852000000 > /sys/kernel/tegra_gpu/gpu_cap_rate
fi
if [ "$gfix" == "1" ]; then
	echo 612000 > /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq
	echo "65 510000:75 714000:85" > /sys/devices/system/cpu/cpufreq/interactive/target_loads
	# then lock them to stop any process from changing it. 
	chmod 444 /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq
	chmod 444 /sys/devices/system/cpu/cpufreq/interactive/target_loads
fi
if [ "$dtw" == "0" ]; then
	echo 0 > /sys/devices/platform/spi-tegra114.2/spi_master/spi2/spi2.0/input/input0/wake_gesture
fi
if [ "$fs" == "0" ]; then
	echo 0 > /sys/module/sync/parameters/fsync_enabled
fi
if [ "$fc" == "1" ]; then
	echo 1 > /sys/kernel/fast_charge/force_fast_charge
fi
if [ "$mtmp" == "1" ]; then
	$BB mount -t tmpfs -o rw,mode=1777 tmpfs /data/local/tmp
fi
if [ -e "$CSWAP" ] && [ "$cswap" == "0" ]; then
	rm $CSWAP
fi
