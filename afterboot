#!/system/bin/sh
#
# W.I.P. script, by USBhost. made for the Nexus 9.
#
# I use busybox for some commands because
# some of them are newer.
#

# Load Symbols
	. /system/etc/FI.d/symbols

# Script pacific Symbol
	LC="afterboot"

# Give some time for the system to boot
if [ "$1" != "s" ]; then
	$BB sleep 30;
fi

# overclocking.
# CPU 2.5 ghz
# GPU 0.984 ghz
## (0 = disabled) (1 = enabled) ##
	oc=0

# CPU Interactive Governor fix.
# this will increase battery life.
# Note: but adding some lag.
	gfix=0 ## (0 = disabled) (1 = enabled) ##
	gpfix=70 # % until the cpu jumps frequencies
		 # (debugging).

# FSync
# This helps reduce data corruption but
# lowers performance.
## (0 = disabled) (1 = default/enabled) ## 
	fs=1

# USB Fast Charge.
## (0 = kernel default/disabled) (1 = enabled) ##
	fc=1

#   -------------------------<TCP>-------------------------   #

# Fix ping loops when adblocking.
iptables -I INPUT 1 -i lo -p tcp --dport 443 -j REJECT;

#   ------------------------<MEMORY>-----------------------   #

# LMK even it all out. (debugging).
#echo "18432,23040,27648,32256,36864,41472" > /sys/module/lowmemorykiller/parameters/minfree;
#echo "0,200,400,600,800,1000" > /sys/module/lowmemorykiller/parameters/adj;

# Ultra Kernel Samepage Merging/Kernel Samepage Merging
# This tries to save memory by scaning/searching for pages that are the same.
# Then it merges them into one page... saving memory. 
# ---- NOTE ----
# This does not work vary well when ZRAM/SWAP
# because it can not scan swap.
# This may or may not add lag.
# This uses a small/medium amount of cpu.
## (0 = disabled) (1 = enabled) ##
	ksm=0

# SWAP wait.
# This controls if you want swap to be at a certain percent
# full until lmk starts killing.
# ---- NOTE ----
# "swait" will account free swap in lmk if enabled.
# 	(0 = kernel default/disabled) (1 = enabled)
# "swaitp" will choose which percent killing is allowed.
## 1=0% 2=50% 3=66% 4=75% 5=80% 10=90% 0=100% 00=off ##
	swait=0
	swaitp=00

# ZRAM (ONLY).
# This make's a compressed ram block
# that is used as swap to make more usable ram.
# (Google ZRAM for more info)
# ---- NOTE ----
# "aswap" will be null if enabled.
# This uses a fair amount of cpu.
# "zswap" is in MB.
## (0 = disabled) ##
	zswap=256

# /cache swap file.
# This make's a swap file.
# ---- NOTE ----
# "cswap" must not go over 150MB if /cache is formated to f2fs.
# "cswap" is in MB.
## (0 = disabled) ##
	cswap=0

# /cache all swap.
# This will make /cache completely swap.
# ---- NOTE ----
# "cswap" will be null if enabled.
# The size of /cache is 256MB.
# Swap will be 256MB or 512MB if "raid" = 1 .
# Cache will be formated to swap.
# Your EMMC will be used a lot aka shorter lifespan.
## (0 = disabled) (1 = enabled) ##
	aswap=0

# Raid 0
# This will Split memory evenly across "zswap" and "cswap"
# that makes "cswap" or "aswap" about ~100% faster.
# ---- NOTE ----
# If it's set too big you will get a lot of lag.
# This uses a small to fair amount of cpu.
# This can be used on "cswap" or "aswap".
## (0 = disabled) (1 = enabled) ##
	raid=0

#   ------------------------<EXPERT>-----------------------   #

# Load override
# This is where you would put all your desired settings into (if you want to)
# "/sdcard/override", so you don't have to edit system on every Kernel update.
# Note: be vary careful with what you put in it, this runs as root. 
# Use with caution!
if [ -e "$ORID" ]; then
	$LOGCATI$LC " $ORID; loading ";
	. $ORID;
else
	$LOGCATI$LC " no override; skipping ";
fi
MCACHE;
$BB swapoff -a; # to keep things clean
echo 1 > $ZRS/reset; # to keep things clean
if [ "$cswap" -ge "1" ] && [ "$aswap" == "0" ] && [ "$MCACHE" == "$CACHE" ]; then
	CSIZE;
	if [ ! -e "$CSWAP" ] || [ "$CSIZE" != "$cswap" ]; then # to make or change cswap
		# if cswap is more than the free space left in cache then this will loop on every reboot which is vary bad.
		# if you get "cache; is out of space" error please lower cswap size.
		# FIXME: try to fix this problem.
		if [ -e $CSWAP ] && [ "$CSIZE" != "$cswap" ]; then
			$LOGCATI$LC " cache; changing cswap size to $cswap ";
		fi
		$BB dd if=/dev/zero of=$CSWAP bs="$cswap"M count=1;
		format="1"; # if cswap size changed and/or was made we must format it to swap.
		CSIZE;
		if [ "$cswap" != "$CSIZE" ]; then # if so this is bad!
			cswap="0"; # stop cswap from being used so the user can know sooner.
			format="0";
			$LOGCATW$LC " cache; is out of space ";
			reason="out of space";
		fi
	fi
	if [ "$cswap" != "0" ]; then # if so all is good!
		chmod 600 $CSWAP; # make sure root can only read and write to it.
		if [ "$format" == "1" ]; then
			$BB mkswap $CSWAP;
		fi
		if [ "$raid" == "1" ]; then
			$BB swapon -p 1 $CSWAP; # raid 0
		elif [ "$raid" == "0" ]; then
			$BB swapon $CSWAP; # cswap
		fi
		if [ "$raid" == "1" ] && [ "$cswap" -ge "1" ]; then
			echo 1 > $ZRS/reset;
			echo 1 > $ZRS/max_comp_streams;
			echo lz4 > $ZRS/comp_algorithm;
			echo "$cswap"M > $ZRS/disksize;
			$BB mkswap $ZRB;
			$BB swapon -p 1 $ZRB;
		fi
	elif [ "$cswap" == "0" ]; then # if so this is bad!
		$LOGCATW$LC " cswap; will not run; $reason";
	fi
fi
if [ "$zswap" == "0" ] && [ "$aswap" == "1" ]; then
	MCACHE;
	if [ "$MCACHE" == "$CACHE" ]; then # if mounted unmount it.
		$BB umount /cache;
		MCACHE;
		if [ "$MCACHE" == "" ]; then
			$LOGCATI$LC " cache; unmount success ";
			aswap="1";
			format="1"; # format is needed
		elif [ "$MCACHE" == "$CACHE" ]; then
			$LOGCATW$LC " cache; unmount failed ";
			reason="cache is still mounted";
			aswap="0";
		fi
	elif [ "$MCACHE" == "" ]; then # cache was not mounted; can be swap.
		aswap="1";
		format="0"; # do not format
	fi
	if [ "$aswap" == "1" ] && [ "$format" == "1" ]; then
		# FIXME: stop the mount if the format failed.
		$BB mkswap $CACHE || $LOGCATW$LC " format failed ";
	fi
	if [ "$aswap" == "1" ]; then
		$BB mount -t tmpfs -o rw,mode=1777 tmpfs /cache;
		$BB swapon -p 1 $CACHE || $LOGCATW$LC " swapon failed ";
		if [ "$raid" == "1" ]; then
			echo 1 > $ZRS/reset;
			echo 1 > $ZRS/max_comp_streams;
			echo lz4 > $ZRS/comp_algorithm;
			echo "$PSIZE"M > $ZRS/disksize;
			$BB mkswap $ZRB;
			$BB swapon -p 1 $ZRB;
		fi
	elif [ "$aswap" == "0" ]; then # if so this is bad!
		$LOGCATI$LC "aswap skipped; $reason";
	fi
fi
if [ "$zswap" -ge "1" ] && [ "$aswap" == "0" ] && [ "$cswap" == "0" ]; then
	echo 1 > $ZRS/reset;
	echo "$CORE" > $ZRS/max_comp_streams;
	echo lz4 > $ZRS/comp_algorithm;
	echo "$zswap"M > $ZRS/disksize;
	$BB mkswap $ZRB;
	$BB swapon $ZRB;
fi
if  [ "$ksm" == "1" ]; then
	if [ -e /sys/kernel/mm/uksm/run ]; then
		# uksm is slower than ksm but uksm can scan almost everything
		# so make sleep_millisecs the most it can go. 1000 is the max.
		# note: sleep_millisecs is not the same as in ksm.
		echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs;
		echo 1 > /sys/kernel/mm/uksm/run;
	elif [ -e /sys/kernel/mm/ksm/run ]; then
		# these values where taken from google's low memory doc
		# for the best all-rounder performance/battery ratio.
		echo 100 > /sys/kernel/mm/ksm/pages_to_scan;
		echo 500 > /sys/kernel/mm/ksm/sleep_millisecs;
		echo 1 > /sys/kernel/mm/ksm/deferred_timer;
		echo 1 > /sys/kernel/mm/ksm/run;
	fi
else    # just to be safe, still config them.
	if [ -e /sys/kernel/mm/ksm/run ]; then
		echo 100 > /sys/kernel/mm/ksm/pages_to_scan;
		echo 500 > /sys/kernel/mm/ksm/sleep_millisecs;
		echo 1 > /sys/kernel/mm/ksm/deferred_timer;
		echo 0 > /sys/kernel/mm/ksm/run;
	elif [ -e /sys/kernel/mm/uksm/run ]; then
		echo 1000 > /sys/kernel/mm/uksm/sleep_millisecs;
		echo 0 > /sys/kernel/mm/uksm/run;
	fi
fi
if [ "$swait" == "1" ]; then
	echo Y > /sys/module/lowmemorykiller/parameters/swap_wait;
	if [ "$raid" == "1" ] || [ "$zswap" -gt "$PSIZE" ]; then
		# use swap as much as posable if not you will get a lot more lag.
		# because in flounder if free memory gets vary low things will get lagy!
		echo 100 > /proc/sys/vm/swappiness;
	fi
	if [ "$swaitp" != "00" ]; then
		echo $swaitp > /sys/module/lowmemorykiller/parameters/swap_wait_percent;
	fi
fi

if [ "$oc" == "1" ]; then
	echo 2499000 > /sys/module/cpu_tegra/parameters/cpu_user_cap # This must be set to oc
elif [ "$oc" == "0" ]; then
	# the gpu starts at the max frequency so set it back to the stock frequency.
	echo 1 > /sys/kernel/tegra_gpu/gpu_cap_state
	echo 852000000 > /sys/kernel/tegra_gpu/gpu_cap_rate
fi
if [ "$gfix" == "1" ]; then
	echo 510000 > /sys/devices/system/cpu/cpufreq/interactive/hispeed_freq;
	echo "$gpfix" > /sys/devices/system/cpu/cpufreq/interactive/target_loads;
fi
if [ "$fs" == "0" ]; then
	echo 0 > /sys/module/sync/parameters/fsync_enabled;
fi
if [ "$fc" == "1" ]; then
	echo 1 > /sys/kernel/fast_charge/force_fast_charge;
fi
if [ -e "$CSWAP" ] && [ "$cswap" == "0" ]; then
	CSIZE;
	if [ "$CSIZE" -ge "150" ]; then
		rm $CSWAP;
	fi
fi

# Turn on led
echo 1 > /sys/class/htc_sensorhub/sensor_hub/led_en;
sleep 2;
echo 0 > /sys/class/htc_sensorhub/sensor_hub/led_en;

# Allow suspend
echo tmp_lock > /sys/power/wake_unlock && $LOGCATI$LC " Done ";
